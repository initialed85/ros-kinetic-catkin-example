// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file Example.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "../include/Example.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

ExampleMessage::ExampleMessage()
{


    m_age = 0;

    m_score = 0;


}

ExampleMessage::~ExampleMessage()
{
}

ExampleMessage::ExampleMessage(const ExampleMessage &x)
{
    m_first_name = x.m_first_name;
    m_last_name = x.m_last_name;
    m_age = x.m_age;
    m_score = x.m_score;
}

ExampleMessage::ExampleMessage(ExampleMessage &&x)
{
    m_first_name = std::move(x.m_first_name);
    m_last_name = std::move(x.m_last_name);
    m_age = x.m_age;
    m_score = x.m_score;
}

ExampleMessage& ExampleMessage::operator=(const ExampleMessage &x)
{
    m_first_name = x.m_first_name;
    m_last_name = x.m_last_name;
    m_age = x.m_age;
    m_score = x.m_score;

    return *this;
}

ExampleMessage& ExampleMessage::operator=(ExampleMessage &&x)
{
    m_first_name = std::move(x.m_first_name);
    m_last_name = std::move(x.m_last_name);
    m_age = x.m_age;
    m_score = x.m_score;

    return *this;
}

size_t ExampleMessage::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t ExampleMessage::getCdrSerializedSize(const ExampleMessage& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.first_name().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.last_name().size() + 1;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void ExampleMessage::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_first_name;
    scdr << m_last_name;
    scdr << m_age;
    scdr << m_score;
}

void ExampleMessage::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_first_name;
    dcdr >> m_last_name;
    dcdr >> m_age;
    dcdr >> m_score;
}

size_t ExampleMessage::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            





    return current_align;
}

bool ExampleMessage::isKeyDefined()
{
    return false;
}

void ExampleMessage::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
	 
}